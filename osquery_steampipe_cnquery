# Osquery
{ "osqueryAllUsers": "osqueryi \"SELECT * from users\" --json", "nature": "json" }
{ "osqueryAllGroups": "osqueryi \"SELECT * from groups\" --json", "nature": "json" }
{ "osqueryAllProcesses": "osqueryi \"select pid,name, path from processes\" --json", "nature": "json" }
{ "osqueryUpTime":  "osqueryi \"SELECT days, hours, minutes, seconds FROM uptime\" --json", "nature": "json" }
{ "osqueryWebsiteSslCertificate": "osqueryi \"SELECT valid_to, hostname FROM curl_certificate WHERE hostname in ('www.medigy.com', 'co.medigy.com')\" --json", "nature": "json" }
{ "osqueryRemovedUserAccounts": "osqueryi \"SELECT * FROM users WHERE shell = 'disabled'\" --json", "nature": "json" }
{ "osqueryEncryptedPasswords": "osqueryi \"SELECT md5, sha1, sha256 from hash where path = '/etc/passwd'\" --json", "nature": "json" }
{ "osquerySshdProcess": "osqueryi \"SELECT name, cmdline, path FROM processes WHERE name = 'sshd'\" --json", "nature": "json" }
{ "osqueryMfaEnabled": "osqueryi \"SELECT  node, value, label, path FROM augeas WHERE path='/etc/pam.d/sshd' AND value like '%pam_google_authenticator.so%'\" --json", "nature": "json" }
{ "osqueryDenyRootLogin": "osqueryi \"SELECT node, value, label, path FROM augeas WHERE path='/etc/ssh/sshd_config' AND label like 'PermitRootLogin' AND value like 'no'\" --json", "nature": "json" }


# Steampipe
{ "steampipeListAllAwsBuckets": "steampipe query \"select * from aws_s3_bucket\" --output json", "nature": "json" }
{ "steampipeListDoFirewalls": "steampipe query \"SELECT status,  count(d.*) as Firewalls from  digitalocean_firewall as d group by  status\" --output json", "nature": "json" }
{ "steampipeListDoFirewallInboundRules": "steampipe query \"SELECT ru.id, ru.title, ru.category, ru.from_id, ru.to_id FROM ( with rules as ( select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'addresses') as cidr union select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'droplet_ids') as cidr union select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'kubernetes_ids') as cidr union select urn, title, id, i ->> 'protocol' as protocol_number, cidr as cidr_block, i ->> 'ports' as ports, case   when i ->> 'protocol' = 'icmp'   and i ->> 'ports' = '0' then 'All ICMP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' = '0' then 'All TCP'   when i ->> 'protocol' = 'udp'   and i ->> 'ports' = '0' then 'All UDP'   when i ->> 'protocol' = 'tcp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/TCP')   when i ->> 'protocol' = 'udp'   and i ->> 'ports' <> '0' then concat(i ->> 'ports', '/UDP')   else concat('Procotol: ', i ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(inbound_rules) as i, jsonb_array_elements_text(i -> 'sources' -> 'load_balancer_uids') as cidr) select distinct cidr_block as id, cidr_block as title, 'cidr_block' as category, null as from_id, null as to_id from rules union select concat(title, '_', rule_description) as id, rule_description as title, 'rule' as category, null as from_id, null as to_id from rules union select distinct title as id, title as title, 'inbound' as category, null as from_id, null as to_id from rules union select null as id, null as title, protocol_number as category, cidr_block as from_id, concat(title, '_', rule_description) as to_id from rules union select null as id, null as title, protocol_number as category, concat(title, '_', rule_description) as from_id, title as to_id from rules ) ru\" --output json", "nature": "json" }
{ "steampipeListDoFirewallOutboundRules": "SELECT ru.id, ru.title, ru.category, ru.from_id, ru.to_id FROM (with rules as ( select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp' and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP')   else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'addresses') as cidr union select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp' and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP')   else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'droplet_ids') as cidr union select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp' and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp'   and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP')   else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'kubernetes_ids') as cidr union select urn, title, id, r ->> 'protocol' as protocol_number, cidr as cidr_block, r ->> 'ports' as ports, case   when r ->> 'protocol' = 'icmp'   and r ->> 'ports' = '0' then 'All ICMP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' = '0' then 'All TCP'   when r ->> 'protocol' = 'udp'   and r ->> 'ports' = '0' then 'All UDP'   when r ->> 'protocol' = 'tcp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/TCP')   when r ->> 'protocol' = 'udp'   and r ->> 'ports' <> '0' then concat(r ->> 'ports', '/UDP') else concat('Procotol: ', r ->> 'protocol') end as rule_description from digitalocean_firewall, jsonb_array_elements(outbound_rules) as r, jsonb_array_elements_text(r -> 'destinations' -> 'load_balancer_uids') as cidr) select distinct title as id, title as title, 'inbound' as category, null as from_id, null as to_id, 0 as depth from rules union select concat(title, '_', rule_description) as id, rule_description as title, 'rule' as category, null as from_id, null as to_id, 1 as depth from rules union select distinct cidr_block as id, cidr_block as title, 'cidr_block' as category, null as from_id, null as to_id, 2 as depth from rules union select null as id, null as title, protocol_number as category, concat(title, '_', rule_description) as from_id, title as to_id, null as depth from rules union select null as id, null as title, protocol_number as category, cidr_block as from_id, concat(title, '_', rule_description) as from_id, null as depth from rules) ru\" --output json", "nature": "json" }

# cnquery
{ "cnqueryListAllPorts": "cnquery run -c \"ports.listening { port process }\" --json", "nature": "json" }
{ "cnqueryListAllAwsInstances": "cnquery run aws -c aws.ec2.instances --json", "nature": "json" }
